package main

import (
	"context"
	"fmt"
	"time"
)

//010 OMIT
type contextKey string

func main() {
	n := 3
	ctx, cancel, c1 := gen(n) // generate n integers
	c2 := dbl(ctx, "a", c1)
	c3 := dbl(ctx, "b", c2)
	for i := 1; i <= n; i++ {
		fmt.Println(<-c3)
	}
	cancel() // across process and API boundaries !
	time.Sleep(10 * time.Millisecond)
}

//020 OMIT
//030 OMIT
func gen(n int) (context.Context, context.CancelFunc, <-chan int) {
	ctx, cancel := context.WithCancel(context.Background()) // HL
	ctx = context.WithValue(ctx, contextKey("name"), "genA")
	ch := make(chan int)
	go func() {
		for i := 1; i <= n; i++ {
			ch <- i
		}
	}()
	return ctx, cancel, ch // HL
}

//040 OMIT
//050 OMIT
func dbl(ctx context.Context, name string, i <-chan int) <-chan int { // HL
	ch := make(chan int)
	fmt.Println(name, "starting up, context generated by:", ctx.Value(contextKey("name")))
	go func() {
		for { // note the forever loop
			select {
			case v := <-i:
				ch <- 2 * v
			case <-ctx.Done(): // HL
				fmt.Println(name, "shutting down, received context Done()") // HL
				return
			}
		}
	}()
	return ch
}

//060 OMIT
